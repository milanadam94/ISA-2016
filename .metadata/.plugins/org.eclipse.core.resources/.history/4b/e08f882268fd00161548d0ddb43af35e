package com.sms.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.sms.beans.Bartender;
import com.sms.beans.Cook;
import com.sms.beans.Drink;
import com.sms.beans.Food;
import com.sms.beans.Menu;
import com.sms.beans.Offerings;
import com.sms.beans.Restaurant;
import com.sms.beans.RestaurantManager;
import com.sms.beans.Schedule;
import com.sms.beans.Segment;
import com.sms.beans.SysUser;
import com.sms.beans.Tender;
import com.sms.beans.Waiter;
import com.sms.beans.WorkerSchedule;
import com.sms.service.RestaurantManagerService;
import com.sms.service.RestaurantService;
import com.sms.utilities.Message;

@Controller
@RequestMapping("/restManager")
public class RestaurantManagerController {
	
	@Autowired
	private RestaurantManagerService restManagerService;
	
	@Autowired
	private RestaurantService restaurantService;
	
	
	@GetMapping(path = "/myRestaurant/{restManagerID}")
	@ResponseBody
	public Restaurant getRestaurant(@PathVariable(value="restManagerID") String restManagerID) {
		return restManagerService.getRestaurant(restManagerID);
	}
	
	@PostMapping(path = "/saveRestaurantInfo/{restManagerID}", produces = MediaType.TEXT_PLAIN_VALUE)
	@ResponseBody
	public String saveRestaurantInfo(@PathVariable(value="restManagerID") String restManagerID, Restaurant restaurant){
	
		if(restaurant == null  || restaurant.getName().equals("") || restaurant.getDescription().equals("")){
			return "Ne moze biti prazno!";
		}
		
		RestaurantManager manager = restManagerService.getRestaurantManager(restManagerID);
		
		Restaurant notModifiedRestaurant = restaurantService.getRestaurant(restaurant.getId());
		
		if(manager == null){
			return Message.USERNOTFOUNDERROR;
		}
		
		if(notModifiedRestaurant == null){
			return "Restoran nije pronadjen!";
		}
		
		if(manager.getRestaurant().getId() != restaurant.getId()){
			return "Nemate pravo pristupa ovom restoranu!";
		}
		
		if(notModifiedRestaurant.getName().trim().equals(restaurant.getName())
				&& notModifiedRestaurant.getDescription().trim().equals(restaurant.getDescription())
				&& notModifiedRestaurant.getCategory().equals(restaurant.getCategory())){
			return "Nema promena u unosu!";
		}
		
		restaurantService.saveChanges(restaurant);
		
		return "Uspesno promenjeni podaci!";
	}
	
	
	@PostMapping(path = "/getMenu/{restManagerID}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public Menu getMenu(@PathVariable("restManagerID") String managerID, Restaurant restaurant){
		
		return restManagerService.getMenu(managerID, restaurant);
	}
	
	
	@DeleteMapping(path = "/deleteFood/{foodID}/{menuID}")
	@ResponseBody
	public void deleteFood(@PathVariable("foodID") Integer foodID, @PathVariable("menuID") Integer menuID){
		
		restManagerService.deleteFood(foodID, menuID);
	}
	
	
	@PostMapping(path = "/addFood/{menuID}")
	@ResponseBody
	public void addFood(@PathVariable("menuID") Integer menuID,  Food newFood){
		
		restManagerService.addFood(menuID, newFood);		
		
	}
	
	@PostMapping(path = "/addDrink/{menuID}")
	@ResponseBody
	public void addDrink(@PathVariable("menuID") Integer menuID, Drink newDrink){
		
		restManagerService.addDrink(menuID, newDrink);		
		
	}
	
	@DeleteMapping(path = "/deleteDrink/{drinkID}/{menuID}")
	@ResponseBody
	public void deleteDrink(@PathVariable("drinkID") Integer drinkID, @PathVariable("menuID") Integer menuID){
		
		restManagerService.deleteDrink(drinkID, menuID);
	}
	
	
	@PostMapping(path = "/changeFood/{menuID}")
	@ResponseBody
	public void changeFood(Food newFood, @PathVariable("menuID") Integer menu){

		restManagerService.changeFood(newFood, menu);
		
	}
	
	@PostMapping(path = "/changeDrink/{menuID}")
	@ResponseBody
	public void changeDrink(Drink newDrink, @PathVariable("menuID") Integer menu){

		restManagerService.changeDrink(newDrink, menu);
		
	}
	
	@PostMapping(path = "/registarOfferer", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.TEXT_PLAIN_VALUE)
	@ResponseBody
	public String registarOfferer(@RequestBody SysUser user){
		
		return restManagerService.registarOfferer(user);
	}
	
	
	@PostMapping(path = "/createTender/{userEmail}", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.TEXT_PLAIN_VALUE)
	@ResponseBody
	public String createTender(@RequestBody Tender newTender, @PathVariable("userEmail") String userEmail){
		return restManagerService.createTender(newTender, userEmail);
	}
	
	
	@PostMapping(path = "/registarWorker/{managerID}/{cookType}", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.TEXT_PLAIN_VALUE)
	@ResponseBody
	public String registarWorker(@RequestBody SysUser user, @PathVariable("managerID") String managerID, @PathVariable("cookType") String cookType){
		
		return restManagerService.registarWorker(user,managerID,cookType);
	}
	
	
	
	@GetMapping(path="/getAllMyTenders/{managerID}", produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public List<Tender> getAllMyTenders(@PathVariable("managerID") String managerEmail){
		return restManagerService.getAllMyTenders(managerEmail);
	}
	
	@GetMapping(path="getOfferingsForTender/{tenderID}", produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public List<Offerings> getOfferingsForTender(@PathVariable("tenderID") Integer tenderID){
		return restManagerService.getOfferingsForTender(tenderID);
	}
	
	
	@PostMapping(path="chooseOffering/{offeringID}", produces = MediaType.TEXT_PLAIN_VALUE)
	@ResponseBody
	public String chooseOffering(@PathVariable("offeringID") Integer offeringID){
		return restManagerService.chooseOffering(offeringID);
	}
	
	
	@PostMapping(path="/addSegment/{restoranID}", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.TEXT_PLAIN_VALUE)
	@ResponseBody
	public String addSegment(@PathVariable("restoranID") Integer restoranID, @RequestBody Segment newSegment){
		return restManagerService.addSegment(newSegment,restoranID);
	}
	
	
	@GetMapping(path="/getCooks/{managerID}")
	@ResponseBody
	public List<Cook> getCooks(@PathVariable("managerID") String managerEmail){
		
		return restManagerService.getCooks(managerEmail);
	}
	
	@GetMapping(path="/getBartenders/{managerID}")
	@ResponseBody
	public List<Bartender> getBartenders(@PathVariable("managerID") String managerEmail){
		
		return restManagerService.getBartenders(managerEmail);
	}
	
	@GetMapping(path="/getWaiters/{managerID}")
	@ResponseBody
	public List<Waiter> getWaiters(@PathVariable("managerID") String managerEmail){
		
		return restManagerService.getWaiters(managerEmail);	
	}
	
	@GetMapping(path="/getSchedules/{workerID}", produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public List<WorkerSchedule> getSchedules(@PathVariable("workerID") Integer workerID){
		
		return restManagerService.getSchedules(workerID);
	}
	
	
	@GetMapping(path="/loadAllSegments/{managerID}", produces=MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public List<Segment> loadAllSegments(@PathVariable("managerID") String managerEmail){
		return restManagerService.loadAllSegments(managerEmail);		
	}
	
	
	@PostMapping(path="/addSchedule/{newShift}/{workerID}/{newSegment}", produces=MediaType.TEXT_PLAIN_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public String addSchedule(@RequestBody Schedule schedule, @PathVariable("newShift") String newShift,@PathVariable("workerID") Integer workerID ,@PathVariable("newSegment") Integer segmentID){
		
		return restManagerService.addSchedule(schedule, newShift, workerID, segmentID);
	}
	
	
	
	@GetMapping(path="/getUser/{userID}", produces=MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public SysUser getUser(@PathVariable("userID") Integer userID){
		return restManagerService.getUser(userID);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
}
