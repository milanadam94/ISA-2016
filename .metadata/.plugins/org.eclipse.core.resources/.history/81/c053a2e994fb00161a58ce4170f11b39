package com.sms.controller;

import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.sms.beans.Drink;
import com.sms.beans.Food;
import com.sms.beans.Menu;
import com.sms.beans.Restaurant;
import com.sms.beans.RestaurantManager;
import com.sms.service.RestaurantManagerService;
import com.sms.service.RestaurantService;
import com.sms.utilities.Message;

@Controller
@RequestMapping("/restManager")
public class RestaurantManagerController {
	
	@Autowired
	private RestaurantManagerService restManagerService;
	
	@Autowired
	private RestaurantService restaurantService;
	
	
	@GetMapping(path = "/myRestaurant/{restManagerID}")
	@ResponseBody
	public Restaurant getRestaurant(@PathVariable(value="restManagerID") String restManagerID) {
		return restManagerService.getRestaurant(restManagerID);
	}
	
	@PostMapping(path = "/saveRestaurantInfo/{restManagerID}", produces = MediaType.TEXT_PLAIN_VALUE)
	@ResponseBody
	public String saveRestaurantInfo(@PathVariable(value="restManagerID") String restManagerID, Restaurant restaurant){
	
		if(restaurant == null  || restaurant.getName().equals("") || restaurant.getDescription().equals("")){
			return "Ne moze biti prazno!";
		}
		
		RestaurantManager manager = restManagerService.getRestaurantManager(restManagerID);
		
		Restaurant notModifiedRestaurant = restaurantService.getRestaurant(restaurant.getId());
		
		if(manager == null){
			return Message.USERNOTFOUNDERROR;
		}
		
		if(notModifiedRestaurant == null){
			return "Restoran nije pronadjen!";
		}
		
		if(manager.getRestaurant().getId() != restaurant.getId()){
			return "Nemate pravo pristupa ovom restoranu!";
		}
		
		if(notModifiedRestaurant.getName().trim().equals(restaurant.getName())
				&& notModifiedRestaurant.getDescription().trim().equals(restaurant.getDescription())
				&& notModifiedRestaurant.getCategory().equals(restaurant.getCategory())){
			return "Nema promena u unosu!";
		}
		
		restaurantService.saveChanges(restaurant);
		
		return "Uspesno promenjeni podaci!";
	}
	
	
	@PostMapping(path = "/getMenu/{restManagerID}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public Menu getMenu(@PathVariable("restManagerID") String managerID, Restaurant restaurant){
		
		return restManagerService.getMenu(managerID, restaurant);
	}
	
	
	@DeleteMapping(path = "/deleteFood/{foodID}/{menuID}")
	@ResponseBody
	public void deleteFood(@PathVariable("foodID") Integer foodID, @PathVariable("menuID") Integer menuID){
		
		restManagerService.deleteFood(foodID, menuID);
	}
	
	
	@PostMapping(path = "/addFood/{menuID}")
	@ResponseBody
	public void addFood(@PathVariable("menuID") Integer menuID,  Food newFood){
		
		restManagerService.addFood(menuID, newFood);		
		
	}
	
	@PostMapping(path = "/addDrink/{menuID}")
	@ResponseBody
	public void addDrink(@PathVariable("menuID") Integer menuID, Drink newDrink){
		
		restManagerService.addDrink(menuID, newDrink);		
		
	}
	
	@DeleteMapping(path = "/deleteDrink/{drinkID}/{menuID}")
	@ResponseBody
	public void deleteDrink(@PathVariable("drinkID") Integer drinkID, @PathVariable("menuID") Integer menuID){
		
		restManagerService.deleteDrink(drinkID, menuID);
	}
	
	
	@PostMapping(path = "/changeFoods")
	@ResponseBody
	public void changeFood(List<Food> newMenu){
		System.out.println("---- ");
		
		Iterator<Food> foodIterator = newMenu.iterator();
		while(foodIterator.hasNext()){
			System.out.println(foodIterator.next());
		}
		
	//	System.out.println(newMenu.getId());
	//	restManagerService.changeFoods(newMenu);
		
	}
	
	
	
	
	
	
	
}
